<?php

namespace Tests\Unit\Models;

use App\Models\Circle;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class CircleTest extends TestCase
{
    use RefreshDatabase;

    public function test_circle_can_be_created()
    {
        $circle = Circle::create([
            'name' => 'Test University Class of 2020',
            'type' => 'school_year',
            'criteria' => [
                'institution_name' => 'Test University',
                'graduation_year' => 2020,
            ],
            'auto_generated' => true,
        ]);

        $this->assertInstanceOf(Circle::class, $circle);
        $this->assertEquals('Test University Class of 2020', $circle->name);
        $this->assertEquals('school_year', $circle->type);
        $this->assertTrue($circle->auto_generated);
    }

    public function test_circle_casts_criteria_as_array()
    {
        $circle = Circle::create([
            'name' => 'Test Circle',
            'type' => 'custom',
            'criteria' => ['test' => 'value'],
            'auto_generated' => false,
        ]);

        $this->assertIsArray($circle->criteria);
        $this->assertEquals('value', $circle->criteria['test']);
    }

    public function test_circle_can_add_member()
    {
        $circle = Circle::factory()->create();
        $user = User::factory()->create();

        $result = $circle->addMember($user);

        $this->assertTrue($result);
        $this->assertTrue($circle->users()->where('user_id', $user->id)->exists());
        $this->assertEquals(1, $circle->fresh()->member_count);
    }

    public function test_circle_cannot_add_duplicate_member()
    {
        $circle = Circle::factory()->create();
        $user = User::factory()->create();

        $circle->addMember($user);
        $result = $circle->addMember($user);

        $this->assertFalse($result);
        $this->assertEquals(1, $circle->users()->count());
    }

    public function test_circle_can_remove_member()
    {
        $circle = Circle::factory()->create();
        $user = User::factory()->create();

        $circle->addMember($user);
        $result = $circle->removeMember($user);

        $this->assertTrue($result);
        $this->assertFalse($circle->users()->where('user_id', $user->id)->exists());
        $this->assertEquals(0, $circle->fresh()->member_count);
    }

    public function test_circle_updates_member_count()
    {
        $circle = Circle::factory()->create();
        $users = User::factory()->count(3)->create();

        foreach ($users as $user) {
            $circle->addMember($user);
        }

        $this->assertEquals(3, $circle->fresh()->member_count);

        $circle->removeMember($users->first());
        $this->assertEquals(2, $circle->fresh()->member_count);
    }

    public function test_circle_scopes_work_correctly()
    {
        Circle::factory()->create(['type' => 'school_year']);
        Circle::factory()->create(['type' => 'multi_school']);
        Circle::factory()->create(['auto_generated' => true]);
        Circle::factory()->create(['auto_generated' => false]);

        $this->assertEquals(1, Circle::ofType('school_year')->count());
        $this->assertEquals(1, Circle::ofType('multi_school')->count());
        $this->assertEquals(1, Circle::autoGenerated()->count());
        $this->assertEquals(1, Circle::custom()->count());
    }
}

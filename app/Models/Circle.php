<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Circle extends Model
{
    use HasFactory;

    protected $fillable = [
        'name',
        'type',
        'criteria',
        'member_count',
        'auto_generated',
    ];

    protected $casts = [
        'criteria' => 'array',
        'auto_generated' => 'boolean',
        'member_count' => 'integer',
    ];

    /**
     * The users that belong to this circle.
     */
    public function users(): BelongsToMany
    {
        return $this->belongsToMany(User::class, 'circle_memberships')
                    ->withPivot('joined_at', 'status')
                    ->withTimestamps();
    }

    /**
     * Get active members of this circle.
     */
    public function activeMembers(): BelongsToMany
    {
        return $this->users()->wherePivot('status', 'active');
    }

    /**
     * Get posts that are visible to this circle.
     */
    public function posts(): HasMany
    {
        return $this->hasMany(Post::class)->whereJsonContains('circle_ids', $this->id);
    }

    /**
     * Add a user to this circle.
     */
    public function addMember(User $user): bool
    {
        if ($this->users()->where('user_id', $user->id)->exists()) {
            return false; // User already in circle
        }

        $this->users()->attach($user->id, [
            'joined_at' => now(),
            'status' => 'active',
        ]);

        $this->updateMemberCount();
        
        return true;
    }

    /**
     * Remove a user from this circle.
     */
    public function removeMember(User $user): bool
    {
        $detached = $this->users()->detach($user->id);
        
        if ($detached) {
            $this->updateMemberCount();
            return true;
        }
        
        return false;
    }

    /**
     * Update the member count for this circle.
     */
    public function updateMemberCount(): void
    {
        $count = $this->activeMembers()->count();
        $this->update(['member_count' => $count]);
    }

    /**
     * Get posts visible to a specific user in this circle.
     */
    public function getPostsForUser(User $user)
    {
        // Check if user is a member of this circle
        if (!$this->users()->where('user_id', $user->id)->wherePivot('status', 'active')->exists()) {
            return collect(); // Return empty collection if user is not a member
        }

        return Post::whereJsonContains('circle_ids', $this->id)
                   ->with(['user', 'engagements'])
                   ->orderBy('created_at', 'desc')
                   ->get();
    }

    /**
     * Check if a user can join this circle.
     */
    public function canUserJoin(User $user): bool
    {
        // Auto-generated circles have specific criteria
        if ($this->auto_generated) {
            return $this->matchesCriteria($user);
        }

        // Custom circles can be joined by anyone (for now)
        return true;
    }

    /**
     * Check if user matches circle criteria.
     */
    protected function matchesCriteria(User $user): bool
    {
        $criteria = $this->criteria;

        switch ($this->type) {
            case 'school_year':
                return $user->educations()
                    ->where('institution_name', $criteria['institution_name'] ?? null)
                    ->where('end_year', $criteria['graduation_year'] ?? null)
                    ->exists();

            case 'multi_school':
                $institutionNames = $criteria['institution_names'] ?? [];
                return $user->educations()
                    ->whereIn('institution_name', $institutionNames)
                    ->count() >= 2; // Must have attended at least 2 of the schools

            case 'custom':
                // Custom criteria logic can be extended here
                return true;

            default:
                return false;
        }
    }

    /**
     * Scope to get circles by type.
     */
    public function scopeOfType($query, string $type)
    {
        return $query->where('type', $type);
    }

    /**
     * Scope to get auto-generated circles.
     */
    public function scopeAutoGenerated($query)
    {
        return $query->where('auto_generated', true);
    }

    /**
     * Scope to get custom circles.
     */
    public function scopeCustom($query)
    {
        return $query->where('auto_generated', false);
    }
}
version: '3.8'

services:
  # Laravel Application
  app:
    build:
      context: .
      dockerfile: infrastructure/production/Dockerfile.php
    container_name: alumate_app_prod
    restart: unless-stopped
    volumes:
      - ./storage:/var/www/html/storage
      - ./storage/logs:/var/www/html/storage/logs
    environment:
      - APP_NAME=AlumniPlatform
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_URL=https://your-domain.com
      - APP_KEY=${APP_KEY}
      - DB_CONNECTION=pgsql
      - DB_HOST=db
      - DB_PORT=5432
      - DB_DATABASE=alumni_platform
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - CACHE_STORE=redis
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - QUEUE_CONNECTION=redis
      - BROADCAST_CONNECTION=redis
      - SESSION_DRIVER=redis
      - TENANCY_DATABASE_AUTO_DELETE_ENABLED=false
      - TENANCY_DATABASE_AUTO_CLEANUP=false
    depends_on:
      - db
      - redis
    networks:
      - app_network
    expose:
      - "9000"

  # Nginx Web Server
  nginx:
    build:
      context: .
      dockerfile: infrastructure/production/Dockerfile.nginx
    container_name: alumate_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./public:/var/www/html/public
      - ./storage/app/public:/var/www/html/storage/app/public
      - ./infrastructure/production/config/nginx/conf.d:/etc/nginx/conf.d
      - ./infrastructure/production/letsencrypt:/etc/letsencrypt
      - ./infrastructure/production/certbot/www:/var/www/letsencrypt
    depends_on:
      - app
    networks:
      - app_network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: alumate_db_prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=alumni_platform
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./infrastructure/production/config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d alumni_platform"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: alumate_redis_prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Queue Worker
  queue-worker:
    build:
      context: .
      dockerfile: infrastructure/production/Dockerfile.php
    container_name: alumate_queue_prod
    restart: unless-stopped
    command: ["php", "artisan", "queue:work", "--sleep=3", "--tries=3", "--timeout=90"]
    volumes:
      - ./storage:/var/www/html/storage
    environment:
      - APP_NAME=AlumniPlatform
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=${APP_KEY}
      - DB_CONNECTION=pgsql
      - DB_HOST=db
      - DB_PORT=5432
      - DB_DATABASE=alumni_platform
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - QUEUE_CONNECTION=redis
    depends_on:
      - db
      - redis
    networks:
      - app_network

  # Scheduler
  scheduler:
    build:
      context: .
      dockerfile: infrastructure/production/Dockerfile.php
    container_name: alumate_scheduler_prod
    restart: unless-stopped
    command: ["php", "artisan", "schedule:work"]
    volumes:
      - ./storage:/var/www/html/storage
    environment:
      - APP_NAME=AlumniPlatform
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=${APP_KEY}
      - DB_CONNECTION=pgsql
      - DB_HOST=db
      - DB_PORT=5432
      - DB_DATABASE=alumni_platform
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - db
      - redis
    networks:
      - app_network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: alumate_prometheus_prod
    restart: unless-stopped
    volumes:
      - ./infrastructure/production/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - app_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Node Exporter for metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: alumate_node_exporter_prod
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      - app_network

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: alumate_pg_exporter_prod
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://${DB_USERNAME}:${DB_PASSWORD}@db:5432/alumni_platform?sslmode=disable
    ports:
      - "9187:9187"
    networks:
      - app_network
    depends_on:
      - db

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  app_network:
    driver: bridge